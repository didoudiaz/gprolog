test set
range interval tests (bounded X:[-268435456..268435455], C:5):
	X #> C:   X: [6..268435455]   
	X #> -C:   X: [-4..268435455]   
	X #>= C:   X: [5..268435455]   
	X #>= -C:   X: [-5..268435455]   
	X #< C:   X: [-268435456..4]   
	X #< C:   X: [-268435456..-6]   
	X #=< C:   X: [-268435456..5]   
	X #=< -C:   X: [-268435456..-5]   
	X #= C:   X: [5..5]   
	X #= -C:   X: [-5..-5]   
	X #\= C:   X: [-268435456..268435455]   
	X #\= -C:   X: [-268435456..268435455]   
range interval tests (bounded X:[-200..100], C:5):
	X #> C:   X: [6..100]   
	X #> -C:   X: [-4..100]   
	X #>= C:   X: [5..100]   
	X #>= -C:   X: [-5..100]   
	X #< C:   X: [-200..4]   
	X #< C:   X: [-200..-6]   
	X #=< C:   X: [-200..5]   
	X #=< -C:   X: [-200..-5]   
	X #= C:   X: [5..5]   
	X #= -C:   X: [-5..-5]   
	X #\= C:   X: [-200..100]   
	X #\= -C:   X: [-200..100]   
addition/subtraction tests (bounded X:[-268435456..268435455], Z:[-268435456..268435455], C:5):
	X + C #= Y:   X: [-268435456..268435450]   Y: [-268435451..268435455]   
	X - C #= Y:   X: [-268435451..268435455]   Y: [-268435456..268435450]   
	X + Y #= C:   X: [-268435450..268435455]   Y: [-268435450..268435455]   
	X - Y #= C:   X: [-268435451..268435455]   Y: [-268435456..268435450]   
	X + Y #= -C:   X: [-268435456..268435451]   Y: [-268435456..268435451]   
	X - Y #= -C:   X: [-268435456..268435450]   Y: [-268435451..268435455]   
	X + Y #= Z:   X: [-268435456..268435455]   Y: [-268435456..268435455]   Z: [-268435456..268435455]   
	X - Y #= Z:   X: [-268435456..268435455]   Y: [-268435456..268435455]   Z: [-268435456..268435455]   
addition/subtraction tests (bounded X:[-400..300], Z:[-200..100], C:5):
	X + C #= Y:   X: [-400..300]   Y: [-395..305]   
	X - C #= Y:   X: [-400..300]   Y: [-405..295]   
	X + Y #= C:   X: [-400..300]   Y: [-295..405]   
	X - Y #= C:   X: [-400..300]   Y: [-405..295]   
	X + Y #= -C:   X: [-400..300]   Y: [-305..395]   
	X - Y #= -C:   X: [-400..300]   Y: [-395..305]   
	X + Y #= Z:   X: [-400..300]   Y: [-500..500]   Z: [-200..100]   
	X - Y #= Z:   X: [-400..300]   Y: [-500..500]   Z: [-200..100]   
multiplication/division tests (bounded X:[-268435456..268435455], Z:[-268435456..268435455], C:5):
	X * C #= Y:   X: [-53687091..53687091]   Y: [-268435455..268435455]   
	X / C #= Y:   X: [-268435455..268435455]   Y: [-53687091..53687091]   
	X * -C #= Y:   X: [-53687091..53687091]   Y: [-268435455..268435455]   
	X / -C #= Y:   X: [-268435455..268435455]   Y: [-53687091..53687091]   
	X * Y #= C:   X: [-5..5]   Y: [-5..5]   
	X / Y #= C:   X: [-268435455..268435455]   Y: [-53687091..53687091]   
	X * Y #= -C:   X: [-5..5]   Y: [-5..5]   
	X / Y #= -C:   X: [-268435455..268435455]   Y: [-53687091..53687091]   
	X * Y #= Z:   X: [-268435456..268435455]   Y: [-268435456..268435455]   Z: [-268435456..268435455]   
	X / Y #= Z:   X: [-268435456..268435455]   Y: [-268435456..268435455]   Z: [-268435456..268435455]   
	X * Z #= Y:   X: [-268435456..268435455]   Y: [-268435456..268435455]   Z: [-268435456..268435455]   
	X / Z #= Y:   X: [-268435456..268435455]   Y: [-268435456..268435455]   Z: [-268435456..268435455]   
multiplication/division tests (bounded X:[-400..300], Z:[-200..100], C:5):
	X * C #= Y:   X: [-400..300]   Y: [-2000..1500]   
	X / C #= Y:   X: [-400..300]   Y: [-80..60]   
	X * -C #= Y:   X: [-400..300]   Y: [-1500..2000]   
	X / -C #= Y:   X: [-400..300]   Y: [-60..80]   
	X * Y #= C:   X: [-5..5]   Y: [-5..5]   
	X / Y #= C:   X: [-400..300]   Y: [-80..60]   
	X * Y #= -C:   X: [-5..5]   Y: [-5..5]   
	X / Y #= -C:   X: [-400..300]   Y: [-60..80]   
	X * Y #= Z:   X: [-200..200]   Y: [-200..200]   Z: [-200..100]   
	X / Y #= Z:   X: [-400..300]   Y: [-400..400]   Z: [-200..100]   
	X * Z #= Y:   X: [-400..300]   Y: [-60000..80000]   Z: [-200..100]   
	X / Z #= Y:   X: [-400..300]   Y: [-400..400]   Z: [-200..100]   
power tests (bounded X:[-268435456..268435455], Z:[-268435456..268435455], C1:2, C2:5):
	X ** C2 #= Z:   X: [-48..48]   Z: [-254803968..254803968]   
	C1 ** C2 #= Z:   Z: [32..32]   
	-C1 ** C2 #= Z:   Z: [-32..-32]   
	C1 ** X #= Z:   X: [0..27]   Z: [1..134217728]   
	-C1 ** X #= Z:   X: [0..27]   Z: [-134217728..67108864]   
power tests (bounded X:[-10..5], Z:[-200..100], C1:0, C2:0):
	X ** C2 #= Z:   X: [-10..5]   Z: [1..1]   
	C1 ** C2 #= Z:   Z: [1..1]   
	-C1 ** C2 #= Z:   Z: [1..1]   
	C1 ** X #= Z:   X: [0..5]   Z: [0..1]   
	-C1 ** X #= Z:   X: [0..5]   Z: [0..1]   
power tests (bounded X:[-10..5], Z:[-200..100], C1:1, C2:0):
	X ** C2 #= Z:   X: [-10..5]   Z: [1..1]   
	C1 ** C2 #= Z:   Z: [1..1]   
	-C1 ** C2 #= Z:   Z: [1..1]   
	C1 ** X #= Z:   X: [-10..5]   Z: [1..1]   
	-C1 ** X #= Z:   X: [0..5]   Z: [-1..1]   
power tests (bounded X:[-10..5], Z:[-200..100], C1:2, C2:0):
	X ** C2 #= Z:   X: [-10..5]   Z: [1..1]   
	C1 ** C2 #= Z:   Z: [1..1]   
	-C1 ** C2 #= Z:   Z: [1..1]   
	C1 ** X #= Z:   X: [0..5]   Z: [1..32]   
	-C1 ** X #= Z:   X: [0..5]   Z: [-32..16]   
power tests (bounded X:[-10..5], Z:[-200..100], C1:2, C2:1):
	X ** C2 #= Z:   X: [-10..5]   Z: [-10..5]   
	C1 ** C2 #= Z:   Z: [2..2]   
	-C1 ** C2 #= Z:   Z: [-2..-2]   
	C1 ** X #= Z:   X: [0..5]   Z: [1..32]   
	-C1 ** X #= Z:   X: [0..5]   Z: [-32..16]   
power tests (bounded X:[-10..5], Z:[-200..100], C1:2, C2:2):
	X ** C2 #= Z:   X: [-10..5]   Z: [0..100]   
	C1 ** C2 #= Z:   Z: [4..4]   
	-C1 ** C2 #= Z:   Z: [4..4]   
	C1 ** X #= Z:   X: [0..5]   Z: [1..32]   
	-C1 ** X #= Z:   X: [0..5]   Z: [-32..16]   
power tests (bounded X:[-10..5], Z:[-200..100], C1:2, C2:3):
	X ** C2 #= Z:   X: [-5..4]   Z: [-125..64]   
	C1 ** C2 #= Z:   Z: [8..8]   
	-C1 ** C2 #= Z:   Z: [-8..-8]   
	C1 ** X #= Z:   X: [0..5]   Z: [1..32]   
	-C1 ** X #= Z:   X: [0..5]   Z: [-32..16]   
power tests (bounded X:[-10..5], Z:[-200..100], C1:2, C2:4):
	X ** C2 #= Z:   X: [-3..3]   Z: [0..81]   
	C1 ** C2 #= Z:   Z: [16..16]   
	-C1 ** C2 #= Z:   Z: [16..16]   
	C1 ** X #= Z:   X: [0..5]   Z: [1..32]   
	-C1 ** X #= Z:   X: [0..5]   Z: [-32..16]   
power tests (bounded X:[-10..5], Z:[-200..100], C1:2, C2:5):
	X ** C2 #= Z:   X: [-2..2]   Z: [-32..32]   
	C1 ** C2 #= Z:   Z: [32..32]   
	-C1 ** C2 #= Z:   Z: [-32..-32]   
	C1 ** X #= Z:   X: [0..5]   Z: [1..32]   
	-C1 ** X #= Z:   X: [0..5]   Z: [-32..16]   

time : 0
GNU Prolog 1.4.4 (64 bits)
Compiled Apr  8 2014, 16:28:32 with gcc
By Daniel Diaz
Copyright (C) 1999-2014 Daniel Diaz

